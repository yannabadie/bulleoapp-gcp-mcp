#!/usr/bin/env node

/**
 * Script de test de connexion pour BulleoApp MCP
 * V√©rifie la connectivit√© avec Firebase et GCP
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Couleurs pour l'affichage
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

const log = {
  info: (msg) => console.log(`${colors.blue}‚Ñπ${colors.reset}  ${msg}`),
  success: (msg) => console.log(`${colors.green}‚úÖ${colors.reset} ${msg}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è${colors.reset}  ${msg}`),
  error: (msg) => console.log(`${colors.red}‚ùå${colors.reset} ${msg}`)
};

console.log('\nüß™ Test de connexion BulleoApp MCP\n');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

// Test 1: V√©rifier Firebase CLI
log.info('Test 1: V√©rification Firebase CLI...');
try {
  const firebaseVersion = execSync('firebase --version', { encoding: 'utf8' }).trim();
  log.success(`Firebase CLI install√©: ${firebaseVersion}`);
} catch (error) {
  log.error('Firebase CLI non trouv√©');
  process.exit(1);
}

// Test 2: V√©rifier l'authentification Firebase
log.info('\nTest 2: V√©rification authentification Firebase...');
try {
  execSync('firebase projects:list', { stdio: 'ignore' });
  log.success('Authentifi√© avec Firebase');
} catch (error) {
  log.error('Non authentifi√© avec Firebase');
  log.warning('Ex√©cutez: firebase login');
  process.exit(1);
}

// Test 3: V√©rifier le projet actif
log.info('\nTest 3: V√©rification projet Firebase actif...');
try {
  const projectInfo = execSync('firebase use', { encoding: 'utf8' });
  const match = projectInfo.match(/Active Project: ([^\s]+)/);
  if (match) {
    log.success(`Projet actif: ${match[1]}`);
  } else {
    log.warning('Aucun projet actif');
    log.info('Ex√©cutez: firebase use --add');
  }
} catch (error) {
  log.error('Erreur lors de la v√©rification du projet');
}

// Test 4: V√©rifier la configuration MCP
log.info('\nTest 4: V√©rification configuration MCP...');
const configPaths = [
  path.join(process.cwd(), 'mcp-config', 'claude_desktop_config.json'),
  path.join(process.cwd(), 'mcp-config', 'claude_desktop_config_generated.json')
];

let configFound = false;
for (const configPath of configPaths) {
  if (fs.existsSync(configPath)) {
    log.success(`Configuration trouv√©e: ${path.basename(configPath)}`);
    configFound = true;
    
    // V√©rifier le contenu
    try {
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      if (config.mcpServers && config.mcpServers['firebase-bulleoapp']) {
        log.success('Configuration Firebase MCP valide');
      }
      if (config.mcpServers && config.mcpServers['gcp-vertex-ai']) {
        log.success('Configuration GCP MCP d√©tect√©e');
      }
    } catch (error) {
      log.error('Configuration invalide');
    }
    break;
  }
}

if (!configFound) {
  log.warning('Aucune configuration MCP trouv√©e');
  log.info('Ex√©cutez: ./scripts/setup.sh');
}

// Test 5: V√©rifier les variables d'environnement (optionnel)
log.info('\nTest 5: V√©rification variables d\'environnement...');
if (fs.existsSync('.env.local')) {
  log.success('Fichier .env.local trouv√©');
  
  // V√©rifier les variables cl√©s
  const envContent = fs.readFileSync('.env.local', 'utf8');
  const requiredVars = ['FIREBASE_PROJECT_ID', 'GCP_PROJECT_ID'];
  
  requiredVars.forEach(varName => {
    if (envContent.includes(varName)) {
      log.success(`Variable ${varName} configur√©e`);
    } else {
      log.warning(`Variable ${varName} manquante`);
    }
  });
} else {
  log.warning('Fichier .env.local non trouv√©');
  log.info('Copiez .env.example vers .env.local et configurez-le');
}

// Test 6: V√©rifier la cl√© de service GCP (optionnel)
log.info('\nTest 6: V√©rification compte de service GCP...');
if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {
  const keyPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;
  if (fs.existsSync(keyPath)) {
    log.success(`Cl√© de service trouv√©e: ${path.basename(keyPath)}`);
  } else {
    log.error(`Cl√© de service non trouv√©e: ${keyPath}`);
  }
} else {
  log.warning('GOOGLE_APPLICATION_CREDENTIALS non configur√©');
  log.info('Optionnel pour les fonctionnalit√©s GCP avanc√©es');
}

// Test 7: Test de connexion Firebase (si possible)
log.info('\nTest 7: Test de connexion aux services Firebase...');
try {
  // Tenter de lister les fonctions (non bloquant si aucune)
  execSync('firebase functions:list', { stdio: 'ignore', timeout: 5000 });
  log.success('Connexion aux Cloud Functions r√©ussie');
} catch (error) {
  // Ce n'est pas une erreur critique
  log.info('Cloud Functions non configur√©es ou non accessibles');
}

// R√©sum√©
console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
console.log('üìä R√©sum√© des tests\n');

const allTestsPassed = configFound;

if (allTestsPassed) {
  console.log(`${colors.green}‚úÖ Tous les tests essentiels sont pass√©s!${colors.reset}`);
  console.log('\nVotre configuration MCP est pr√™te √† √™tre utilis√©e.');
  console.log('\nPour utiliser avec Claude Desktop:');
  console.log('1. Copiez la configuration depuis mcp-config/');
  console.log('2. Collez dans Claude Desktop > Settings > Developer');
  console.log('3. Red√©marrez Claude Desktop');
} else {
  console.log(`${colors.yellow}‚ö†Ô∏è  Certains tests ont √©chou√©${colors.reset}`);
  console.log('\nVeuillez corriger les probl√®mes ci-dessus.');
  console.log('Consultez la documentation: https://github.com/yannabadie/bulleoapp-gcp-mcp');
}

console.log('');
process.exit(allTestsPassed ? 0 : 1);